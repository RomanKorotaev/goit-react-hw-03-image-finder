{"version":3,"sources":["components/Searchbar/Searchbar.module.css","components/ImageGallery/ImageGallery.module.css","components/ImageGalleryItem/ImageGalleryItem.module.css","App.module.css","components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Loader/Loader.js","components/Button/Button.js","components/Modal/Modal.js","App.js","js/apiService.js","reportWebVitals.js","index.js"],"names":["module","exports","Searchbar","state","quiryWord","handleQueryChange","event","setState","currentTarget","value","toLowerCase","console","log","handleSubmit","preventDefault","trim","props","onSubmit","alert","className","s","this","SearchForm","type","SearchFormButton","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","webformatURL","largeImageURL","tags","src","alt","ImageGalleryItemImage","ImageGallery","imagesArray","map","id","Loader","Button","Modal","imageApiService","searchQuery","page","fetch","then","response","json","data","incerementPage","hits","newQuery","hitsArray","App","handleSummitForm","fetchImages","length","localStorage","setItem","JSON","stringify","tmpHits","getItem","parsedHits","parse","prevProp","prevState","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c49279f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__15xWl\",\"SearchForm\":\"Searchbar_SearchForm__WDgem\",\"SearchFormButton\":\"Searchbar_SearchFormButton__3Uqyl\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__1K7ZQ\",\"SearchFormInput\":\"Searchbar_SearchFormInput__3g4wa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__3pd9G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItemImage\":\"ImageGalleryItem_ImageGalleryItemImage__LgLPw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2hJd0\"};","import React, {Component} from 'react';\r\nimport s from './Searchbar.module.css'\r\n\r\nclass Searchbar extends Component {\r\n\r\n    state = {\r\n        quiryWord: '',\r\n      };\r\n    \r\n      handleQueryChange = event => {\r\n        this.setState({  quiryWord: event.currentTarget.value.toLowerCase() });\r\n        console.log ('Сработала функция handleQueryChange ... Значение this.state.quiryWord :', this.state.quiryWord)\r\n      };\r\n\r\n\r\n      handleSubmit = event => {\r\n        event.preventDefault(); //сбрасываем перезагрузку по умолчанию при сабмите фломы\r\n    \r\n        // Проверяем не пустая ли строка в инпуте\r\n        if (this.state.quiryWord.trim() === '') {\r\n        alert (\"Введите поисковое слово!\")\r\n          return;\r\n        }\r\n    \r\n        this.props.onSubmit(this.state.quiryWord);\r\n        this.setState({ quiryWord: \"\" }); //делаем сброс поискового слова после сабмита формы (для новых вводов)\r\n      };\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n            <header className={s.Searchbar}>\r\n\r\n                <form onSubmit={this.handleSubmit}  className={s.SearchForm}>\r\n\r\n                    <button type=\"submit\" className={s.SearchFormButton}>\r\n                    <span className={s.SearchFormButtonLabel}>Search</span>\r\n                    </button>\r\n\r\n                    <input\r\n                    className={s.SearchFormInput}\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    autoFocus\r\n                    placeholder=\"Search images and photos\"\r\n                    value={this.state.quiryWord}\r\n                    onChange ={this.handleQueryChange}\r\n                    />\r\n\r\n                </form>\r\n\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Searchbar;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ImageGalleryItem.module.css'\r\n\r\nclass ImageGalleryItem extends Component {\r\n\r\n    state = {\r\n        webformatURL: \"\",\r\n        largeImageURL: \"\",\r\n        tags:\"\" \r\n      }\r\n\r\n\r\n    render() {\r\n        const {webformatURL, tags } = this.props;\r\n        return (\r\n        <img src={webformatURL} alt={tags} className={s.ImageGalleryItemImage} />\r\n        )\r\n    }\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n    webformatURL: PropTypes.string.isRequired,\r\n};\r\n\r\n\r\nexport default ImageGalleryItem;","import React, {Component} from 'react';\r\nimport s from './ImageGallery.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport ImageGalleryItem from '../ImageGalleryItem'\r\n\r\n\r\nclass ImageGallery extends Component {\r\n\r\n    state = {\r\n        imagesArray: [],\r\n      }\r\n\r\n    render() {\r\n        const { imagesArray } = this.props;\r\n        return (\r\n        \r\n        <ul className={s.ImageGallery}>\r\n               { imagesArray.map(({id, webformatURL, largeImageURL, tags }) => (\r\n            <li  key = {id}>\r\n              {/* ВНИМАНИЕ!  Важный синтаксис во время прокидывания пропов по цепочке: onDelete = {()=>onDeleteContact(id)} */}\r\n                  <ImageGalleryItem webformatURL={webformatURL}  largeImageURL={largeImageURL} tags={tags}/>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n        )\r\n    }\r\n}\r\n\r\nImageGallery.propTypes = {\r\n \r\n    state: PropTypes.arrayOf(\r\n        // Объект с определённой структурой\r\n        PropTypes.shape({\r\n            webformatURL: PropTypes.string.isRequired,\r\n            largeImageURL: PropTypes.string.isRequired\r\n        }),\r\n    ), \r\n  };\r\n\r\n\r\nexport default ImageGallery;","import React, {Component} from 'react';\r\nimport s from './Loader.module.css'\r\n\r\nclass Loader extends Component {\r\n\r\n    render() {\r\n        return (\r\n           <p> Loader </p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loader;","import React, {Component} from 'react';\r\nimport s from './Button.module.css'\r\n\r\nclass Button extends Component {\r\n\r\n    render() {\r\n        return (\r\n           <p> Button </p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\nimport s from './Modal.module.css'\r\n\r\nclass Modal extends Component {\r\n\r\n    render() {\r\n        return (\r\n           <p> Modal </p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, {Component} from 'react';\nimport Searchbar from './components/Searchbar'\n\nimport ImageGallery from './components/ImageGallery'\nimport ImageGalleryItem from './components/ImageGalleryItem'\nimport Loader from './components/Loader'\nimport Button from './components/Button'\nimport Modal from './components/Modal'\n\n// import './App.css'\n\n\n////------------------GET-запрос -------------------\n\nimport ImageApiService from './js/apiService'\n\n\nconst imageApiService = new ImageApiService();\nlet hitsArray = []\n\n\n\nclass App extends Component {\n\nstate = {\n  imagesArray: [],\n  quiryWord: \"\",\n}\n\ncomponentDidMount () {\n\n  console.log (\" App: componentDidMount ()\");\n  imageApiService.fetchImages()\n  .then (hits=>{\n    console.log (\" Из hits App: componentDidMount () сделан get-запрос: \", hits);\n    hitsArray = hits;\n    console.log (\" Получили ответ от бекенда: hitsArray = hits : \", hitsArray);\n\n     // ------- Дублированние данных в localStorage\n      //  Если  есть массив с данными, то записываем его в localStorage\n      if (  hitsArray.length !== 0) {\n        // console.log (\"  Обновили статус \" );\n        localStorage.setItem (\"hits\", JSON.stringify( hitsArray) );\n        console.log (\" Записали  hits в  localStorage\" );\n      } else {console.log (\"Пустой\" );}\n\n      const tmpHits =  localStorage.getItem (\"hits\");\n      const parsedHits =  JSON.parse( tmpHits )\n\n  // Перед записью данных в state  проверяем не пустой ли массив с полученными данными :   if (parsedContacts)\n  if (parsedHits!==null) { \n    this.setState ({imagesArray:  parsedHits })\n    console.log (\" Записали parsedHits  в  стейт - imagesArray\" );\n  }\n\n  });\n\n      // // ------- Дублированние данных в localStorage\n      // //  Если  есть массив с данными, то записываем его в localStorage\n      // if (  hitsArray.length !== 0) {\n      //   // console.log (\"  Обновили статус \" );\n      //   localStorage.setItem (\"hits\", JSON.stringify( hitsArray) );\n      //   console.log (\" Записали  hits в  localStorage\" );\n      // } else {console.log (\"Пустой\" );}\n  \n\n      const tmpHits =  localStorage.getItem (\"hits\");\n      const parsedHits =  JSON.parse( tmpHits )\n\n  // // Перед записью данных в state  проверяем не пустой ли массив с полученными данными :   if (parsedContacts)\n  // if (parsedHits!==null) { \n  //   this.setState ({imagesArray:  parsedHits })\n  //   console.log (\" Записали parsedHits  в  стейт - imagesArray\" );\n  // }\n\n}\n\n\ncomponentDidUpdate (prevProp, prevState) {\n\n    if ( this.state.quiryWord !== prevState.quiryWord) {\n    console.log (\" Worked: componentDidUpdate ().  Обновили статус. quiryWord = \" , this.state.quiryWord);\n    \n    localStorage.setItem (\"hits\", JSON.stringify(this.state.imagesArray) );\n\n    // Вызываем метод (сеттер) класса ImageApiService() для перезаписи в его конструкторе значения поискового слова\n    imageApiService.query = this.state.quiryWord;\n\n     imageApiService.fetchImages()\n      .then (hits=>{\n        console.log (\" Из hits App: componentDidUpdate  сделан ОБНОВЛЁННЫЙ get-запрос: \", hits);\n        hitsArray = hits;\n        console.log (\" Получили НОВЫЙ ответ от бекенда: hitsArray = hits : \", hitsArray); \n\n        // // ------- Дублированние данных в localStorage\n        //  Если  есть массив с данными, то записываем его в localStorage\n        if (  hitsArray.length !== 0) {\n          // console.log (\"  Обновили статус \" );\n          localStorage.setItem (\"hits\", JSON.stringify( hitsArray) );\n          console.log (\" Записали  hits в  localStorage\" );\n        } else {console.log (\"Пустой\" );}\n  \n        const tmpHits =  localStorage.getItem (\"hits\");\n        const parsedHits =  JSON.parse( tmpHits )\n  \n        // Перед записью данных в state  проверяем не пустой ли массив с полученными данными :   if (parsedContacts)\n        if (parsedHits!==null) { \n          this.setState ({imagesArray:  parsedHits })\n          console.log (\" Записали parsedHits  в  стейт - imagesArray\" );\n        }\n\n\n      })\n  \n\n    }\n\n}\n\n\nhandleSummitForm = quiryWord => {\n  console.log(\"Вызвана функция handleSummitForm = (quiryWord) : \", quiryWord);\n  this.setState ({quiryWord}) // пример записи короткого свойства. Аналог: {quiryWord : quiryWord } , где второе слово- это полученный аргумент функции\n}\n\n\n  render () {\n    // console.log ( 'this.state.imagesArray :', this.state.imagesArray)\n\n    return (\n      <div>\n       \n       {/* Внимание! Важный синтаксис. Вот как в данном случае правильно пеередавать метот класса как пром в дочерний react-компонент  */}\n        <Searchbar onSubmit= {this.handleSummitForm}/>\n\n        {/* <Searchbar /> */}\n\n        <ImageGallery imagesArray= {this.state.imagesArray}/>\n        \n        <Loader />\n        <Button />\n        <Modal />\n\n        </div>\n    )\n  }\n}\n\nexport default App;\n\n","\r\nconst KEY_API = '23193680-1d95b6a7ab6e160162f942df5'\r\nconst BASE_URL = 'pixabay.com/api'\r\n\r\n\r\n class ImageApiService {\r\n\r\n     constructor() {\r\n         //По умолчанию для первой загрузки будет запрос на картинки природы\r\n         this.searchQuery = 'nature';\r\n         this.page = 1;\r\n    };\r\n    \r\n     \r\n     fetchImages() {\r\n            return fetch(`https://${BASE_URL}/?image_type=photo&orientation=horizontal&q=${this.searchQuery}&page=${this.page}&per_page=12&key=${KEY_API} `)\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n                        // console.log(data)\r\n                        //this.page += 1;\r\n                        this.incerementPage();\r\n                        \r\n                        return  data.hits;\r\n                    });\r\n    } \r\n\r\n\r\n     get query() {\r\n         return this.searchQuery;\r\n     }\r\n     \r\n     set query(newQuery) {\r\n         this.searchQuery = newQuery;\r\n     }\r\n\r\n     incerementPage() {\r\n         this.page += 1;\r\n      }\r\n\r\n     resetPage() {\r\n         this.page = 1;\r\n     }\r\n\r\n}\r\n \r\nexport default ImageApiService;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport s from './App.module.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App className={s.App}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}